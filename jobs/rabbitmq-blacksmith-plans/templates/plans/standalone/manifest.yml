---
meta:
  size: default
  username: (( vault $CREDENTIALS "/rabbitmq/system:username" ))
  password: (( vault $CREDENTIALS "/rabbitmq/system:password" ))
<% if p("rabbitmq.route_registrar.enabled") -%>
  cf:
    deployment_name: <%= p("cf.deployment_name") %>
<% end -%>

<% if p("rabbitmq.route_registrar.enabled") -%>
params:
   cf:
     core_network: <%= p("cf.core_network") %>
<% end -%>

features:
  use_dns_addresses: true

releases:
  - { name: rabbitmq-forge, version: latest }
<% if p("rabbitmq.route_registrar.enabled") %>
  - { name: routing, version: latest }
  - { name: bpm, version: latest }
  - { name: bosh-dns-aliases, version: latest}
<% end -%>

stemcells:
- alias: default
  os: ubuntu-bionic
  version: latest

update:
  canaries: 1
  max_in_flight: 10
  canary_watch_time: 1000-30000
  update_watch_time: 1000-30000

instance_groups:
  - name: standalone
    instances: 1
    azs: [z1]
    networks: [name: (( grab meta.net || "rabbitmq-service" ))]
    stemcell: default

    vm_type: (( grab meta.size ))

    jobs:
      - name:    rabbitmq
        release: rabbitmq-forge
        properties:
          rabbitmq:
            network: (( grab meta.net || "rabbitmq-service" ))
            default:
              user: rabbit
              password: (( grab meta.password ))
            admin:
              user: (( grab meta.username ))
              pass: (( grab meta.password ))
            tls:
              enabled: (( grab meta.rabbitmq.tls.enabled || false ))
              dual-mode: (( grab meta.rabbitmq.tls.dual-mode || false ))
              ca: (( grab meta.rabbitmq.tls.ca || "" ))
              crt: (( grab meta.rabbitmq.tls.crt || "" ))
              key: (( grab meta.rabbitmq.tls.key || "" ))

        provides:
          rabbitmq-servers:
            as: rabbitmq-servers
            ip_addresses: false

        consumes:
          rabbitmq-servers:
            from: rabbitmq-servers
            ip_addresses: false

<% if p("rabbitmq.route_registrar.enabled") -%>
      - name: route_registrar
        release: routing
        properties:
          nats:
            tls:
                enabled: true
                client_cert: "((/<%= p("bosh.deployment_name") %>-bosh/<%= p("cf.deployment_name") %>/nats_client_cert.certificate))"
                client_key: "((/<%= p("bosh.deployment_name") %>-bosh/<%= p("cf.deployment_name") %>/nats_client_cert.private_key))"
          route_registrar:
            logging_level: "debug"
            routes:
              - name: <%= spec.deployment %>
                uris:
                 - "rmq-<%= spec.deployment %>.<%= p("cf.system_domain") %>"
                registration_interval: 10s
                <% if p("rabbitmq.route_registrar.tls.enabled") == "true" -%>
                tls_port: 15671
                server_cert_domain_san: rmq-<%= spec.deployment %>.<%= p("cf.system_domain") %>
                <% else %>
                port: 15672
                <% end -%>
                
        consumes:
          nats:
            from: nats
            deployment: <%= p("cf.deployment_name") %>
          nats-tls:
            from: nats-tls
            deployment: <%= p("cf.deployment_name") %>
      - name:  bpm
        release: bpm

addons:
- name: bosh-dns-aliases
  include:
    jobs:
    - name: route_registrar
      release: routing
  jobs:
  - name: bosh-dns-aliases
    release: bosh-dns-aliases
    properties:
      aliases:
      - domain: nats.service.cf.internal
        targets:
        - deployment: (( grab meta.cf.deployment_name ))
          domain: bosh
          instance_group: nats
          network: (( grab params.cf.core_network ))
          query: '*'
      - domain: _.nats.service.cf.internal
        targets:
        - deployment: (( grab meta.cf.deployment_name ))
          domain: bosh
          instance_group: nats
          network: (( grab params.cf.core_network ))
          query: _
<% end %>
