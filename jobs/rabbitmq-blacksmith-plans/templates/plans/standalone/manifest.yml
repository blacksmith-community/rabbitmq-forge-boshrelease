---
meta:
  size: default
  disk_config: {}
  username: (( vault $CREDENTIALS "/rabbitmq/system:username" ))
  password: (( vault $CREDENTIALS "/rabbitmq/system:password" ))
  username-monitoring: (( vault $CREDENTIALS "/rabbitmq/monitoring:username" ))
  password-monitoring: (( vault $CREDENTIALS "/rabbitmq/monitoring:password" ))
  username-app: (( vault $CREDENTIALS "/rabbitmq/app:username" ))
  password-app: (( vault $CREDENTIALS "/rabbitmq/app:password" ))
  environment: <%= p('environment') %>
  bosh_env: <%= p('bosh_env') %>

<% if p("rabbitmq.autoscale.enabled") -%>
  cf:
    exodus_path: <%= p('cf.exodus_path') %>
    deployment_name: <%= p('cf.deployment_name') %>
    system_domain: <%= p('cf.system_domain') %>
    api_url:    <%= p('cf.api_url') %>
    username:   <%= p('cf.username') %>
    password:   <%= p('cf.password') %>

  mgmt_ssl:    <%= p('rabbitmq_metrics_emitter.rmq_management.skip_ssl_validation') %>
  mgmt_port:   <%= p('rabbitmq_metrics_emitter.rmq_management.mgmt_port') %>
  mgmt_scheme: <%= p('rabbitmq_metrics_emitter.rmq_management.mgmt_scheme') %>
  mgmt_host:   <%= p('rabbitmq_metrics_emitter.rmq_management.mgmt_host') %>
<% end -%>

<% if p("rabbitmq.autoscale.enabled") || p("rabbitmq.tls.enabled") -%>
variables:
<% end -%>

<% if p("rabbitmq.autoscale.enabled") -%>
- name: rabbitmq_metrics_emitter_crt
  type: certificate

  options:
    ca: (( concat "/" meta.bosh_env "-bosh/" meta.environment "-blacksmith/blacksmith_services_ca" ))
    common_name: (( concat meta.environment "-rabbitmq-metrics-emitter.bosh" ))

  consumes:
    common_name:
      from: rabbitmq-emitter

    alternative_name: 
      from: rabbitmq-emitter

      properties:
        wildcard: true
<% end -%>

<% if p("rabbitmq.tls.enabled") -%>
- name: rabbitmq_standalone_crt
  type: certificate

  options:
    ca: (( concat "/" meta.bosh_env "-bosh/" meta.environment "-blacksmith/blacksmith_services_ca" ))
    common_name: (( concat meta.environment "-rabbitmq-standalone.bosh" ))
    alternative_names: [(( concat name ".<%= p("cf.system_domain") %>" ))]
  consumes:
    alternative_name:
      from: rabbitmq-san
      properties:
        wildcard: true
<% end -%>

<% if p("rabbitmq.route_registrar.enabled") -%>
params:
  cf:
    core_network: <%= p("cf.core_network") %>
<% end -%>

features:
  use_dns_addresses: true

instance_groups:
- name: standalone
  instances: 1
  azs: (( grab meta.azs ))
  stemcell: default
  vm_type: (( grab meta.size ))

  networks: 
    - name: (( grab meta.net || "rabbitmq-service" ))

  .: (( inject meta.disk_config )) # Accounts for persistent_disk_type option

  jobs:
  - name:    rabbitmq
    release: rabbitmq-forge

    properties:
      rabbitmq:
        plan: standalone
        vhost: (( grab meta.params.instance_id || "/" ))
        network: (( grab meta.net || "rabbitmq-service" ))

        admin:
          user: (( grab meta.username ))
          pass: (( grab meta.password ))

        monitoring:
          user: (( grab meta.username-monitoring ))
          pass: (( grab meta.password-monitoring ))

        app:
          user: (( grab meta.username-app ))
          pass: (( grab meta.password-app ))

        tls:
          enabled: (( grab meta.rabbitmq.tls.enabled || false ))
          dual-mode: (( grab meta.rabbitmq.tls.dual-mode || false ))
<% if p("rabbitmq.tls.enabled") -%>
          ca: (( file "/var/vcap/jobs/blacksmith/config/tls/blacksmith_services_ca" ))
          crt: ((rabbitmq_standalone_crt.certificate))
          key: ((rabbitmq_standalone_crt.private_key))
<% end -%>

    provides:
      rabbitmq-servers:
        as: rabbitmq-servers
        ip_addresses: false

      rabbitmq-san:
        as: rabbitmq-san
        ip_addresses: false

      rabbitmq-alias-domain:
        aliases:
          - domain: "_.rabbitmq_standalone.bosh"
            placeholder_type: uuid

    consumes:
      rabbitmq-servers:
        from: rabbitmq-servers
        ip_addresses: false

    custom_provider_definitions:
      - name: rabbitmq-san
        type: address
      - name: rabbitmq-alias-domain
        type: placeholder
<% if p("rabbitmq.autoscale.enabled") -%>

<% if !p("rabbitmq.route_registrar.enabled") -%>
  - name:    bpm
    release: bpm
<% end -%>

  - name: loggregator_agent
    release: loggregator-agent

    consumes:
      doppler:
        from: doppler
        deployment: (( grab meta.cf.deployment_name ))

    properties:
      loggregator:
        tls:
          ca_cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.ca" ))
          agent:
            cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.crt" ))
            key: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.key" ))

      metrics:
        server_name: (( concat meta.environment "-rabbitmq-metrics-emitter" ))
        ca_cert: (( file "/var/vcap/jobs/blacksmith/config/tls/blacksmith_services_ca" ))
        cert:    ((rabbitmq_metrics_emitter_crt.certificate))
        key:     ((rabbitmq_metrics_emitter_crt.private_key))

  - name: rabbitmq-metrics-emitter
    release: rabbitmq-metrics-emitter

    properties:
      rabbitmq_metrics_emitter:
        cloud_foundry:
          api:    (( grab meta.cf.api_url ))
          skip_ssl_validation: <%= p('rabbitmq_metrics_emitter.cloud_foundry.skip_ssl_validation') %>
          username: <%= p('rabbitmq_metrics_emitter.cloud_foundry.username') %>
          password: <%= p('rabbitmq_metrics_emitter.cloud_foundry.password') %>

        rmq_management:
          skip_ssl_validation: (( grab meta.mgmt_ssl ))
          endpoint: (( concat meta.mgmt_scheme "://" meta.mgmt_host ":" meta.mgmt_port "/api" ))
          user: (( grab meta.username ))
          password: (( grab meta.password ))

        loggregator:
          tls:
            cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.crt" ))
            key: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.key" ))
            ca_cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.ca" ))

    provides:
      rabbitmq-emitter:
        as: rabbitmq-emitter
        ip_addresses: false

    custom_provider_definitions:
      - name: rabbitmq-emitter
        type: address
<% end -%>

<% if p("rabbitmq.route_registrar.enabled") -%>
  - name: route_registrar
    release: routing

    properties:
      nats:
        tls:
          enabled: true
          client_cert: "((/<%= p("bosh.deployment_name") %>-bosh/<%= p("cf.deployment_name") %>/nats_client_cert.certificate))"
          client_key: "((/<%= p("bosh.deployment_name") %>-bosh/<%= p("cf.deployment_name") %>/nats_client_cert.private_key))"

      route_registrar:
        logging_level: "debug"

        routes:
        - name: (( grab name ))
          uris:
          - (( concat name ".<%= p("cf.system_domain") %>" ))
          registration_interval: 10s
<% if p("rabbitmq.route_registrar.tls.enabled") == true -%>
          tls_port: 15671
          server_cert_domain_san: (( concat name ".<%= p("cf.system_domain") %>" ))
<% else -%>
          port: 15672
<% end -%>

    consumes:
<% if p("cf.nats_tls_only") == false -%>
      nats:
        from: nats
        deployment: <%= p("cf.deployment_name") -%>

      nats-tls:
        from: nats-tls
        deployment: <%= p("cf.deployment_name") -%>
<% else -%>
      nats-tls:
        from: nats-tls
        deployment: <%= p("cf.deployment_name") -%>
<% end -%>

  - name:    bpm
    release: bpm

addons:
- name: bosh-dns-aliases

  include:
    jobs:
    - name: route_registrar
      release: routing

  jobs:
  - name: bosh-dns-aliases
    release: bosh-dns-aliases

    properties:
      aliases:
      - domain: nats.service.cf.internal

        targets:
        - deployment: (( grab meta.cf.deployment_name ))
          domain: bosh
          instance_group: nats
          network: (( grab params.cf.core_network ))
          query: '*'
      - domain: _.nats.service.cf.internal

        targets:
        - deployment: (( grab meta.cf.deployment_name ))
          domain: bosh
          instance_group: nats
          network: (( grab params.cf.core_network ))
          query: _

<% end -%>

releases:
  - name: rabbitmq-forge
    version: latest
<% if p("rabbitmq.route_registrar.enabled") -%>
  - name: "routing"
    version: "0.266.0"
    url: "https://bosh.io/d/github.com/cloudfoundry/routing-release?v=0.266.0"
    sha1: "d57ae8fe0d0d8a9b040cea254a782d1d5e8fa2e3"
<% end -%>
<% if p("rabbitmq.route_registrar.enabled") || p("rabbitmq.autoscale.enabled") -%>
  - name: "bpm"
    version: "1.2.1"
    url: "https://bosh.io/d/github.com/cloudfoundry/bpm-release?v=1.2.1"
    sha1: "36299a55c00d28cfe54bbb4772ca617f52d76adb"
  - name: "bosh-dns-aliases"
    version: "0.0.4"
    url: "https://bosh.io/d/github.com/cloudfoundry/bosh-dns-aliases-release?v=0.0.4"
    sha1: "55b3dced813ff9ed92a05cda02156e4b5604b273"
<% end -%>
<% if p("rabbitmq.autoscale.enabled") -%>
  - name: "loggregator-agent"
    version: "7.2.1"
    url: "https://bosh.io/d/github.com/cloudfoundry/loggregator-agent-release?v=7.2.1"
    sha1: "623e45f6c19a68d01c313a9a1a504dabc39ac1cf"
  - name: rabbitmq-metrics-emitter
    version: 0.4.1
    url:     https://github.com/starkandwayne/rabbitmq-metrics-emitter-release/releases/download/v0.4.1/rabbitmq-metrics-emitter-0.4.1.tgz
    sha1:    05afc6f3559f45e0696c6a3760242045640e0df8
<% end -%>

stemcells:
- alias: default
  os: ubuntu-jammy
  version: latest

update:
  canaries: 1
  max_in_flight: 10
  canary_watch_time: 1000-30000
  update_watch_time: 1000-30000

